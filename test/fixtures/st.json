{"ok":false,"vulnerabilities":[{"CVSSv3":"CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:L","alternativeIds":["SNYK-JS-MIME-10788"],"creationTime":"2017-09-26T05:48:40.307000Z","credit":["Cristian-Alexandru Staicu"],"cvssScore":3.7,"description":"## Overview\n\n[mime](https://www.npmjs.com/package/mime) is a comprehensive, compact MIME type module.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (ReDoS).\nIt uses regex the following regex `/.*[\\.\\/\\\\]/` in its lookup, which can cause a slowdown of 2 seconds for 50k characters.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `mime` to version 1.4.1, 2.0.3 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0)\n\n- [GitHub Commit](https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d)\n\n- [GitHub Issue](https://github.com/broofa/node-mime/issues/167)\n\n- [NPM Security Advisory](https://www.npmjs.com/advisories/535)\n","disclosureTime":"2017-09-07T21:00:00Z","exploit":"Not Defined","fixedIn":["1.4.1","2.0.3"],"functions":[{"functionId":{"className":null,"filePath":"mime.js","functionName":"mime.module.exports.lookup"},"version":["<1.2.6"]},{"functionId":{"className":null,"filePath":"mime.js","functionName":"Mime.prototype.lookup"},"version":[">=1.2.6 <1.4.1"]},{"functionId":{"className":null,"filePath":"Mime.js","functionName":"Mime.prototype.getType"},"version":[">=2.0.0 <2.0.3"]}],"functions_new":[{"functionId":{"filePath":"mime.js","functionName":"mime.module.exports.lookup"},"version":["<1.2.6"]},{"functionId":{"filePath":"mime.js","functionName":"Mime.prototype.lookup"},"version":[">=1.2.6 <1.4.1"]},{"functionId":{"filePath":"Mime.js","functionName":"Mime.prototype.getType"},"version":[">=2.0.0 <2.0.3"]}],"id":"npm:mime:20170907","identifiers":{"ALTERNATIVE":["SNYK-JS-MIME-10788"],"CVE":["CVE-2017-16138"],"CWE":["CWE-400"],"NSP":[535]},"language":"js","modificationTime":"2019-12-23T13:05:14.510572Z","moduleName":"mime","packageManager":"npm","packageName":"mime","patches":[{"comments":[],"id":"patch:npm:mime:20170907:0","modificationTime":"2019-12-03T11:40:45.877450Z","urls":["https://snyk-patches.s3.amazonaws.com/npm/mime/20170907/mime_20170907_0_0_855d0c4b8b22e4a80b9401a81f2872058eae274d.patch"],"version":"=1.2.11 || =1.3.4"}],"publicationTime":"2017-09-27T05:48:40Z","references":[{"title":"GitHub Commit","url":"https://github.com/broofa/node-mime/commit/1df903fdeb9ae7eaa048795b8d580ce2c98f40b0"},{"title":"GitHub Commit","url":"https://github.com/broofa/node-mime/commit/855d0c4b8b22e4a80b9401a81f2872058eae274d"},{"title":"GitHub Issue","url":"https://github.com/broofa/node-mime/issues/167"},{"title":"NPM Security Advisory","url":"https://www.npmjs.com/advisories/535"}],"semver":{"vulnerable":["<1.4.1",">=2.0.0 <2.0.3"]},"severity":"low","title":"Regular Expression Denial of Service (ReDoS)","from":["st@0.2.4","mime@1.2.11"],"upgradePath":["st@1.2.1","mime@1.4.1"],"version":"1.2.11","name":"mime","isUpgradable":true,"isPatchable":true,"isPinnable":false},{"CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H","alternativeIds":["SNYK-JS-NEGOTIATOR-10104"],"creationTime":"2016-06-16T18:00:02.240000Z","credit":["Adam Baldwin"],"cvssScore":7.5,"description":"## Overview\n\n[negotiator](https://npmjs.org/package/negotiator) is an HTTP content negotiator for Node.js.\n\n\nAffected versions of this package are vulnerable to Regular Expression Denial of Service (DoS)\nwhen parsing `Accept-Language` http header.\n\n## Details\nDenial of Service (DoS) describes a family of attacks, all aimed at making a system inaccessible to its original and legitimate users. There are many types of DoS attacks, ranging from trying to clog the network pipes to the system by generating a large volume of traffic from many machines (a Distributed Denial of Service - DDoS - attack) to sending crafted requests that cause a system to crash or take a disproportional amount of time to process.\r\n\r\nThe Regular expression Denial of Service (ReDoS) is a type of Denial of Service attack. Regular expressions are incredibly powerful, but they aren't very intuitive and can ultimately end up making it easy for attackers to take your site down.\r\n\r\nLet’s take the following regular expression as an example:\r\n```js\r\nregex = /A(B|C+)+D/\r\n```\r\n\r\nThis regular expression accomplishes the following:\r\n- `A` The string must start with the letter 'A'\r\n- `(B|C+)+` The string must then follow the letter A with either the letter 'B' or some number of occurrences of the letter 'C' (the `+` matches one or more times). The `+` at the end of this section states that we can look for one or more matches of this section.\r\n- `D` Finally, we ensure this section of the string ends with a 'D'\r\n\r\nThe expression would match inputs such as `ABBD`, `ABCCCCD`, `ABCBCCCD` and `ACCCCCD`\r\n\r\nIt most cases, it doesn't take very long for a regex engine to find a match:\r\n\r\n```bash\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCD\")'\r\n0.04s user 0.01s system 95% cpu 0.052 total\r\n\r\n$ time node -e '/A(B|C+)+D/.test(\"ACCCCCCCCCCCCCCCCCCCCCCCCCCCCX\")'\r\n1.79s user 0.02s system 99% cpu 1.812 total\r\n```\r\n\r\nThe entire process of testing it against a 30 characters long string takes around ~52ms. But when given an invalid string, it takes nearly two seconds to complete the test, over ten times as long as it took to test a valid string. The dramatic difference is due to the way regular expressions get evaluated.\r\n\r\nMost Regex engines will work very similarly (with minor differences). The engine will match the first possible way to accept the current character and proceed to the next one. If it then fails to match the next one, it will backtrack and see if there was another way to digest the previous character. If it goes too far down the rabbit hole only to find out the string doesn’t match in the end, and if many characters have multiple valid regex paths, the number of backtracking steps can become very large, resulting in what is known as _catastrophic backtracking_.\r\n\r\nLet's look at how our expression runs into this problem, using a shorter string: \"ACCCX\". While it seems fairly straightforward, there are still four different ways that the engine could match those three C's:\r\n1. CCC\r\n2. CC+C\r\n3. C+CC\r\n4. C+C+C.\r\n\r\nThe engine has to try each of those combinations to see if any of them potentially match against the expression. When you combine that with the other steps the engine must take, we can use [RegEx 101 debugger](https://regex101.com/debugger) to see the engine has to take a total of 38 steps before it can determine the string doesn't match.\r\n\r\nFrom there, the number of steps the engine must use to validate a string just continues to grow.\r\n\r\n| String | Number of C's | Number of steps |\r\n| -------|-------------:| -----:|\r\n| ACCCX | 3 | 38\r\n| ACCCCX | 4 | 71\r\n| ACCCCCX | 5 | 136\r\n| ACCCCCCCCCCCCCCX | 14 | 65,553\r\n\r\n\r\nBy the time the string includes 14 C's, the engine has to take over 65,000 steps just to see if the string is valid. These extreme situations can cause them to work very slowly (exponentially related to input size, as shown above), allowing an attacker to exploit this and can cause the service to excessively consume CPU, resulting in a Denial of Service.\n\n## Remediation\n\nUpgrade `negotiator` to version 0.6.1 or higher.\n\n\n## References\n\n- [GitHub Commit](https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c)\n\n- [OSWAP Advisory](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS)\n","disclosureTime":"2016-06-16T17:36:06Z","exploit":"Not Defined","fixedIn":["0.6.1"],"functions":[{"functionId":{"className":null,"filePath":"lib/language.js","functionName":"parseLanguage"},"version":["<0.6.1"]}],"functions_new":[{"functionId":{"filePath":"lib/language.js","functionName":"parseLanguage"},"version":["<0.6.1"]}],"id":"npm:negotiator:20160616","identifiers":{"ALTERNATIVE":["SNYK-JS-NEGOTIATOR-10104"],"CVE":["CVE-2016-10539"],"CWE":["CWE-400"],"NSP":[106]},"language":"js","modificationTime":"2019-12-02T14:39:17.044101Z","moduleName":"negotiator","packageManager":"npm","packageName":"negotiator","patches":[{"comments":[],"id":"patch:npm:negotiator:20160616:3","modificationTime":"2019-12-03T11:40:45.832684Z","urls":["https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_3_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"],"version":"0.1.0"},{"comments":[],"id":"patch:npm:negotiator:20160616:2","modificationTime":"2019-12-03T11:40:45.831546Z","urls":["https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_2_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"],"version":"<= 0.4.7 > 0.1.0"},{"comments":[],"id":"patch:npm:negotiator:20160616:1","modificationTime":"2019-12-03T11:40:45.830538Z","urls":["https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_1_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"],"version":"<= 0.5.3 > 0.4.7"},{"comments":[],"id":"patch:npm:negotiator:20160616:0","modificationTime":"2019-12-03T11:40:45.829417Z","urls":["https://snyk-patches.s3.amazonaws.com/npm/negotiator/20160616/negotiator_20160616_0_0_26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c.patch"],"version":"0.6.0"}],"publicationTime":"2016-06-16T17:36:06Z","references":[{"title":"GitHub Commit","url":"https://github.com/jshttp/negotiator/commit/26a05ec15cf7d1fa56000d66ebe9c9a1a62cb75c"},{"title":"OSWAP Advisory","url":"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"}],"semver":{"vulnerable":["<0.6.1"]},"severity":"high","title":"Regular Expression Denial of Service (DoS)","from":["st@0.2.4","negotiator@0.2.8"],"upgradePath":["st@1.1.0","negotiator@0.6.1"],"version":"0.2.8","name":"negotiator","isUpgradable":true,"isPatchable":true,"isPinnable":false},{"CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N","alternativeIds":["SNYK-JS-ST-10012"],"creationTime":"2014-02-06T07:33:48Z","credit":["Charlie Somerville"],"cvssScore":5.3,"description":"## Overview\r\nVersions prior to 0.2.5 did not properly prevent path traversal. Literal dots in a path were resolved out, but url encoded dots were not. Thus, a request like ``` /%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd ``` would leak sensitive files and data from the server.\r\n\r\nAs of version 0.2.5, any ```'/../'``` in the request path, urlencoded or not, will be replaced with ```'/'```. If your application depends on url traversal, then you are encouraged to please refactor so that you do not depend on having ```..``` in url paths, as this tends to expose data that you may be surprised to be exposing.\r\n\r\n## Details\r\nA Directory Traversal attack (also known as path traversal) aims to access files and directories that are stored outside the intended folder. By manipulating files with \"dot-dot-slash (../)\" sequences and its variations, or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system, including application source code, configuration, and other critical system files.\r\n\r\nDirectory Traversal vulnerabilities can be generally divided into two types:\r\n\r\n- **Information Disclosure**: Allows the attacker to gain information about the folder structure or read the contents of sensitive files on the system.\r\n\r\n`st` is a module for serving static files on web pages, and contains a [vulnerability of this type](https://snyk.io/vuln/npm:st:20140206). In our example, we will serve files from the `public` route.\r\n\r\nIf an attacker requests the following URL from our server, it will in turn leak the sensitive private key of the root user.\r\n\r\n```\r\ncurl http://localhost:8080/public/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/root/.ssh/id_rsa\r\n```\r\n**Note** `%2e` is the URL encoded version of `.` (dot).\r\n\r\n- **Writing arbitrary files**: Allows the attacker to create or replace existing files. This type of vulnerability is also known as `Zip-Slip`. \r\n\r\nOne way to achieve this is by using a malicious `zip` archive that holds path traversal filenames. When each filename in the zip archive gets concatenated to the target extraction folder, without validation, the final path ends up outside of the target folder. If an executable or a configuration file is overwritten with a file containing malicious code, the problem can turn into an arbitrary code execution issue quite easily.\r\n\r\nThe following is an example of a `zip` archive with one benign file and one malicious file. Extracting the malicious file will result in traversing out of the target folder, ending up in `/root/.ssh/` overwriting the `authorized_keys` file:\r\n\r\n```\r\n2018-04-15 22:04:29 .....           19           19  good.txt\r\n2018-04-15 22:04:42 .....           20           20  ../../../../../../root/.ssh/authorized_keys\r\n```\r\n\r\n\r\n## Remediation\r\nUpgrade to version 0.2.5 or greater.\r\n\r\n## References\r\n- https://github.com/isaacs/st#security-status\r\n- http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers","disclosureTime":"2014-02-06T07:33:48Z","exploit":"Not Defined","fixedIn":["0.2.5"],"functions":[{"functionId":{"className":null,"filePath":"st.js","functionName":"Mount.prototype.getPath"},"version":[">0.0.1 <0.2.5"]}],"functions_new":[{"functionId":{"filePath":"st.js","functionName":"Mount.prototype.getPath"},"version":[">0.0.1 <0.2.5"]}],"id":"npm:st:20140206","identifiers":{"ALTERNATIVE":["SNYK-JS-ST-10012"],"CVE":["CVE-2014-3744"],"CWE":["CWE-22"],"NSP":[36]},"language":"js","modificationTime":"2019-03-05T12:09:02.337335Z","moduleName":"st","packageManager":"npm","packageName":"st","patches":[{"comments":[],"id":"patch:npm:st:20140206:0","modificationTime":"2019-12-03T11:40:45.736720Z","urls":["https://snyk-patches.s3.amazonaws.com/npm/st/20140206/st-20140206_0_0_6b54ce2d2fb912eadd31e2c25c65456d2c8666e1.patch"],"version":"<0.2.5 >0.1.4"}],"publicationTime":"2014-02-06T07:33:48Z","references":[{"title":"BLOG.NPMJS.ORG","url":"http://blog.npmjs.org/post/80277229932/newly-paranoid-maintainers"},{"title":"GITHUB.COM","url":"https://github.com/isaacs/st%23security-status"},{"title":"GitHub Commit","url":"https://github.com/isaacs/st/commit/6b54ce2d2fb912eadd31e2c25c65456d2c8666e1"}],"semver":{"vulnerable":["<0.2.5"]},"severity":"medium","title":"Directory Traversal","from":["st@0.2.4"],"upgradePath":["st@0.2.5"],"version":"0.2.4","name":"st","isUpgradable":true,"isPatchable":true,"isPinnable":false},{"CVSSv3":"CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:N/A:N/E:H/RL:O/RC:C","alternativeIds":["SNYK-JS-ST-10820"],"creationTime":"2017-10-13T18:54:37Z","credit":["Xin Gao"],"cvssScore":4.3,"description":"## Overview\n[`st`](https://www.npmjs.com/package/st) is a module for serving static files.\n\nAffected versions of this package are vulnerable to Open Redirect. A malicious user could send a specially crafted request, which would automatically redirect the request to another domain, controlled by the attacker.\n\n**Note:**  `st` will only redirect if requests are served from the root(`/`) and not from a subdirectory\n\n## References\n- [GitHub Commit](https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16)\n","disclosureTime":"2017-10-13T23:01:42Z","exploit":"High","fixedIn":["1.2.2"],"functions":[],"functions_new":[],"id":"npm:st:20171013","identifiers":{"ALTERNATIVE":["SNYK-JS-ST-10820"],"CVE":["CVE-2017-16224"],"CWE":["CWE-601"],"NSP":[547]},"language":"js","modificationTime":"2019-05-30T14:51:34.696578Z","moduleName":"st","packageManager":"npm","packageName":"st","patches":[],"publicationTime":"2017-10-15T07:10:40.818000Z","references":[{"title":"GitHub Commit","url":"https://github.com/isaacs/st/commit/579960c629f12a27428e2da84c54f517e37b0a16"}],"semver":{"vulnerable":["<1.2.2"]},"severity":"medium","title":"Open Redirect","from":["st@0.2.4"],"upgradePath":["st@1.2.2"],"version":"0.2.4","name":"st","isUpgradable":true,"isPatchable":false,"isPinnable":false}],"numDependencies":6,"severityMap":{"high":1,"medium":2,"low":1},"org":"remy","packageManager":"npm","summary":"4 vulnerable dependency paths","alerts":[{"msg":"Snyk CLI supports Node.js v8.0.0 and higher. Support for Node.js v6.5.0+ is temporarily available, but will be discontinued after January 2020. Please upgrade your runtime version in order to get Snyk CLI updates.The latest CLI version that supports Node.js 4 is `snyk@1.88.2`.","name":"env-deprecation","type":"info"}]}
